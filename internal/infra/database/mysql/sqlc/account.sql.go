// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (email, password, name, is_valid)
VALUES (?, ?, ?, ?)
`

type CreateAccountParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
	IsValid  bool   `json:"is_valid"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.IsValid,
	)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM accounts
WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, email, password, name, is_valid, verified_at, created_at, updated_at
FROM accounts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.IsValid,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, password, name, is_valid, verified_at, created_at, updated_at
FROM accounts
WHERE email = ? LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.IsValid,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, email, password, name, is_valid, verified_at, created_at, updated_at
FROM accounts
ORDER BY id LIMIT ?
OFFSET ?
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Name,
			&i.IsValid,
			&i.VerifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :execresult
UPDATE accounts
SET password   = ?,
    name       = ?,
    is_valid   = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateAccountParams struct {
	Password  string    `json:"password"`
	Name      string    `json:"name"`
	IsValid   bool      `json:"is_valid"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccount,
		arg.Password,
		arg.Name,
		arg.IsValid,
		arg.UpdatedAt,
		arg.ID,
	)
}

const updateAccountValid = `-- name: UpdateAccountValid :execresult
UPDATE accounts
SET is_valid   = ?,
    verified_at = ?
WHERE id = ?
`

type UpdateAccountValidParams struct {
	IsValid    bool         `json:"is_valid"`
	VerifiedAt sql.NullTime `json:"verified_at"`
	ID         int64        `json:"id"`
}

func (q *Queries) UpdateAccountValid(ctx context.Context, arg UpdateAccountValidParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountValid, arg.IsValid, arg.VerifiedAt, arg.ID)
}
