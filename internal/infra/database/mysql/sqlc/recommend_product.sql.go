// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: recommend_product.sql

package db

import (
	"context"
	"database/sql"
)

const createRecommendProduct = `-- name: CreateRecommendProduct :execresult
INSERT INTO recommend_products (product_id)
VALUES (?)
`

func (q *Queries) CreateRecommendProduct(ctx context.Context, productID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRecommendProduct, productID)
}

const deleteRecommendProduct = `-- name: DeleteRecommendProduct :exec
DELETE
FROM recommend_products
WHERE id = ?
`

func (q *Queries) DeleteRecommendProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecommendProduct, id)
	return err
}

const listRecommendProducts = `-- name: ListRecommendProducts :many
SELECT products.id, products.name, products.price
FROM recommend_products
LEFT JOIN products
ON recommend_products.product_id = products.id ORDER BY products.id ASC
`

type ListRecommendProductsRow struct {
	ID    sql.NullInt64  `json:"id"`
	Name  sql.NullString `json:"name"`
	Price sql.NullString `json:"price"`
}

func (q *Queries) ListRecommendProducts(ctx context.Context) ([]ListRecommendProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecommendProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRecommendProductsRow{}
	for rows.Next() {
		var i ListRecommendProductsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
